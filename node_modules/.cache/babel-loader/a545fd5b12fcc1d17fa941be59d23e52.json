{"ast":null,"code":"'use strict'; // rfc7231 6.1\n\nvar _slicedToArray = require(\"/Users/meikaprince/Desktop/purrrfectPals/purrrfectpals/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst statusCodeCacheableByDefault = [200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501]; // This implementation does not understand partial responses (206)\n\nconst understoodStatuses = [200, 203, 204, 300, 301, 302, 303, 307, 308, 404, 405, 410, 414, 501];\nconst hopByHopHeaders = {\n  date: true,\n  // included, because we add Age update Date\n  connection: true,\n  'keep-alive': true,\n  'proxy-authenticate': true,\n  'proxy-authorization': true,\n  te: true,\n  trailer: true,\n  'transfer-encoding': true,\n  upgrade: true\n};\nconst excludedFromRevalidationUpdate = {\n  // Since the old body is reused, it doesn't make sense to change properties of the body\n  'content-length': true,\n  'content-encoding': true,\n  'transfer-encoding': true,\n  'content-range': true\n};\n\nfunction parseCacheControl(header) {\n  const cc = {};\n  if (!header) return cc; // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n  // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n\n  const parts = header.trim().split(/\\s*,\\s*/); // TODO: lame parsing\n\n  for (const part of parts) {\n    const _part$split = part.split(/\\s*=\\s*/, 2),\n          _part$split2 = _slicedToArray(_part$split, 2),\n          k = _part$split2[0],\n          v = _part$split2[1];\n\n    cc[k] = v === undefined ? true : v.replace(/^\"|\"$/g, ''); // TODO: lame unquoting\n  }\n\n  return cc;\n}\n\nfunction formatCacheControl(cc) {\n  let parts = [];\n\n  for (const k in cc) {\n    const v = cc[k];\n    parts.push(v === true ? k : k + '=' + v);\n  }\n\n  if (!parts.length) {\n    return undefined;\n  }\n\n  return parts.join(', ');\n}\n\nmodule.exports = class CachePolicy {\n  constructor(req, res, {\n    shared,\n    cacheHeuristic,\n    immutableMinTimeToLive,\n    ignoreCargoCult,\n    trustServerDate,\n    _fromObject\n  } = {}) {\n    if (_fromObject) {\n      this._fromObject(_fromObject);\n\n      return;\n    }\n\n    if (!res || !res.headers) {\n      throw Error('Response headers missing');\n    }\n\n    this._assertRequestHasHeaders(req);\n\n    this._responseTime = this.now();\n    this._isShared = shared !== false;\n    this._trustServerDate = undefined !== trustServerDate ? trustServerDate : true;\n    this._cacheHeuristic = undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n\n    this._immutableMinTtl = undefined !== immutableMinTimeToLive ? immutableMinTimeToLive : 24 * 3600 * 1000;\n    this._status = 'status' in res ? res.status : 200;\n    this._resHeaders = res.headers;\n    this._rescc = parseCacheControl(res.headers['cache-control']);\n    this._method = 'method' in req ? req.method : 'GET';\n    this._url = req.url;\n    this._host = req.headers.host;\n    this._noAuthorization = !req.headers.authorization;\n    this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n\n    this._reqcc = parseCacheControl(req.headers['cache-control']); // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n    // so there's no point stricly adhering to the blindly copy&pasted directives.\n\n    if (ignoreCargoCult && 'pre-check' in this._rescc && 'post-check' in this._rescc) {\n      delete this._rescc['pre-check'];\n      delete this._rescc['post-check'];\n      delete this._rescc['no-cache'];\n      delete this._rescc['no-store'];\n      delete this._rescc['must-revalidate'];\n      this._resHeaders = Object.assign({}, this._resHeaders, {\n        'cache-control': formatCacheControl(this._rescc)\n      });\n      delete this._resHeaders.expires;\n      delete this._resHeaders.pragma;\n    } // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n    // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n\n\n    if (res.headers['cache-control'] == null && /no-cache/.test(res.headers.pragma)) {\n      this._rescc['no-cache'] = true;\n    }\n  }\n\n  now() {\n    return Date.now();\n  }\n\n  storable() {\n    // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n    return !!(!this._reqcc['no-store'] && ( // A cache MUST NOT store a response to any request, unless:\n    // The request method is understood by the cache and defined as being cacheable, and\n    'GET' === this._method || 'HEAD' === this._method || 'POST' === this._method && this._hasExplicitExpiration()) && // the response status code is understood by the cache, and\n    understoodStatuses.indexOf(this._status) !== -1 && // the \"no-store\" cache directive does not appear in request or response header fields, and\n    !this._rescc['no-store'] && ( // the \"private\" response directive does not appear in the response, if the cache is shared, and\n    !this._isShared || !this._rescc.private) && ( // the Authorization header field does not appear in the request, if the cache is shared,\n    !this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && ( // the response either:\n    // contains an Expires header field, or\n    this._resHeaders.expires || // contains a max-age response directive, or\n    // contains a s-maxage response directive and the cache is shared, or\n    // contains a public response directive.\n    this._rescc.public || this._rescc['max-age'] || this._rescc['s-maxage'] || // has a status code that is defined as cacheable by default\n    statusCodeCacheableByDefault.indexOf(this._status) !== -1));\n  }\n\n  _hasExplicitExpiration() {\n    // 4.2.1 Calculating Freshness Lifetime\n    return this._isShared && this._rescc['s-maxage'] || this._rescc['max-age'] || this._resHeaders.expires;\n  }\n\n  _assertRequestHasHeaders(req) {\n    if (!req || !req.headers) {\n      throw Error('Request headers missing');\n    }\n  }\n\n  satisfiesWithoutRevalidation(req) {\n    this._assertRequestHasHeaders(req); // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n    // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n    // unless the stored response is successfully validated (Section 4.3), and\n\n\n    const requestCC = parseCacheControl(req.headers['cache-control']);\n\n    if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n      return false;\n    }\n\n    if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n      return false;\n    }\n\n    if (requestCC['min-fresh'] && this.timeToLive() < 1000 * requestCC['min-fresh']) {\n      return false;\n    } // the stored response is either:\n    // fresh, or allowed to be served stale\n\n\n    if (this.stale()) {\n      const allowsStale = requestCC['max-stale'] && !this._rescc['must-revalidate'] && (true === requestCC['max-stale'] || requestCC['max-stale'] > this.age() - this.maxAge());\n\n      if (!allowsStale) {\n        return false;\n      }\n    }\n\n    return this._requestMatches(req, false);\n  }\n\n  _requestMatches(req, allowHeadMethod) {\n    // The presented effective request URI and that of the stored response match, and\n    return (!this._url || this._url === req.url) && this._host === req.headers.host && ( // the request method associated with the stored response allows it to be used for the presented request, and\n    !req.method || this._method === req.method || allowHeadMethod && 'HEAD' === req.method) && // selecting header fields nominated by the stored response (if any) match those presented, and\n    this._varyMatches(req);\n  }\n\n  _allowsStoringAuthenticated() {\n    //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n    return this._rescc['must-revalidate'] || this._rescc.public || this._rescc['s-maxage'];\n  }\n\n  _varyMatches(req) {\n    if (!this._resHeaders.vary) {\n      return true;\n    } // A Vary header field-value of \"*\" always fails to match\n\n\n    if (this._resHeaders.vary === '*') {\n      return false;\n    }\n\n    const fields = this._resHeaders.vary.trim().toLowerCase().split(/\\s*,\\s*/);\n\n    for (const name of fields) {\n      if (req.headers[name] !== this._reqHeaders[name]) return false;\n    }\n\n    return true;\n  }\n\n  _copyWithoutHopByHopHeaders(inHeaders) {\n    const headers = {};\n\n    for (const name in inHeaders) {\n      if (hopByHopHeaders[name]) continue;\n      headers[name] = inHeaders[name];\n    } // 9.1.  Connection\n\n\n    if (inHeaders.connection) {\n      const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n\n      for (const name of tokens) {\n        delete headers[name];\n      }\n    }\n\n    if (headers.warning) {\n      const warnings = headers.warning.split(/,/).filter(warning => {\n        return !/^\\s*1[0-9][0-9]/.test(warning);\n      });\n\n      if (!warnings.length) {\n        delete headers.warning;\n      } else {\n        headers.warning = warnings.join(',').trim();\n      }\n    }\n\n    return headers;\n  }\n\n  responseHeaders() {\n    const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n\n    const age = this.age(); // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n    // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n\n    if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {\n      headers.warning = (headers.warning ? `${headers.warning}, ` : '') + '113 - \"rfc7234 5.5.4\"';\n    }\n\n    headers.age = `${Math.round(age)}`;\n    headers.date = new Date(this.now()).toUTCString();\n    return headers;\n  }\n  /**\n   * Value of the Date response header or current time if Date was demed invalid\n   * @return timestamp\n   */\n\n\n  date() {\n    if (this._trustServerDate) {\n      return this._serverDate();\n    }\n\n    return this._responseTime;\n  }\n\n  _serverDate() {\n    const dateValue = Date.parse(this._resHeaders.date);\n\n    if (isFinite(dateValue)) {\n      const maxClockDrift = 8 * 3600 * 1000;\n      const clockDrift = Math.abs(this._responseTime - dateValue);\n\n      if (clockDrift < maxClockDrift) {\n        return dateValue;\n      }\n    }\n\n    return this._responseTime;\n  }\n  /**\n   * Value of the Age header, in seconds, updated for the current time.\n   * May be fractional.\n   *\n   * @return Number\n   */\n\n\n  age() {\n    let age = Math.max(0, (this._responseTime - this.date()) / 1000);\n\n    if (this._resHeaders.age) {\n      let ageValue = this._ageValue();\n\n      if (ageValue > age) age = ageValue;\n    }\n\n    const residentTime = (this.now() - this._responseTime) / 1000;\n    return age + residentTime;\n  }\n\n  _ageValue() {\n    const ageValue = parseInt(this._resHeaders.age);\n    return isFinite(ageValue) ? ageValue : 0;\n  }\n  /**\n   * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n   *\n   * For an up-to-date value, see `timeToLive()`.\n   *\n   * @return Number\n   */\n\n\n  maxAge() {\n    if (!this.storable() || this._rescc['no-cache']) {\n      return 0;\n    } // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n    // so this implementation requires explicit opt-in via public header\n\n\n    if (this._isShared && this._resHeaders['set-cookie'] && !this._rescc.public && !this._rescc.immutable) {\n      return 0;\n    }\n\n    if (this._resHeaders.vary === '*') {\n      return 0;\n    }\n\n    if (this._isShared) {\n      if (this._rescc['proxy-revalidate']) {\n        return 0;\n      } // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n\n\n      if (this._rescc['s-maxage']) {\n        return parseInt(this._rescc['s-maxage'], 10);\n      }\n    } // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n\n\n    if (this._rescc['max-age']) {\n      return parseInt(this._rescc['max-age'], 10);\n    }\n\n    const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n\n    const dateValue = this._serverDate();\n\n    if (this._resHeaders.expires) {\n      const expires = Date.parse(this._resHeaders.expires); // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n\n      if (Number.isNaN(expires) || expires < dateValue) {\n        return 0;\n      }\n\n      return Math.max(defaultMinTtl, (expires - dateValue) / 1000);\n    }\n\n    if (this._resHeaders['last-modified']) {\n      const lastModified = Date.parse(this._resHeaders['last-modified']);\n\n      if (isFinite(lastModified) && dateValue > lastModified) {\n        return Math.max(defaultMinTtl, (dateValue - lastModified) / 1000 * this._cacheHeuristic);\n      }\n    }\n\n    return defaultMinTtl;\n  }\n\n  timeToLive() {\n    return Math.max(0, this.maxAge() - this.age()) * 1000;\n  }\n\n  stale() {\n    return this.maxAge() <= this.age();\n  }\n\n  static fromObject(obj) {\n    return new this(undefined, undefined, {\n      _fromObject: obj\n    });\n  }\n\n  _fromObject(obj) {\n    if (this._responseTime) throw Error('Reinitialized');\n    if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n    this._responseTime = obj.t;\n    this._isShared = obj.sh;\n    this._cacheHeuristic = obj.ch;\n    this._immutableMinTtl = obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n    this._status = obj.st;\n    this._resHeaders = obj.resh;\n    this._rescc = obj.rescc;\n    this._method = obj.m;\n    this._url = obj.u;\n    this._host = obj.h;\n    this._noAuthorization = obj.a;\n    this._reqHeaders = obj.reqh;\n    this._reqcc = obj.reqcc;\n  }\n\n  toObject() {\n    return {\n      v: 1,\n      t: this._responseTime,\n      sh: this._isShared,\n      ch: this._cacheHeuristic,\n      imm: this._immutableMinTtl,\n      st: this._status,\n      resh: this._resHeaders,\n      rescc: this._rescc,\n      m: this._method,\n      u: this._url,\n      h: this._host,\n      a: this._noAuthorization,\n      reqh: this._reqHeaders,\n      reqcc: this._reqcc\n    };\n  }\n  /**\n   * Headers for sending to the origin server to revalidate stale response.\n   * Allows server to return 304 to allow reuse of the previous response.\n   *\n   * Hop by hop headers are always stripped.\n   * Revalidation headers may be added or removed, depending on request.\n   */\n\n\n  revalidationHeaders(incomingReq) {\n    this._assertRequestHasHeaders(incomingReq);\n\n    const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers); // This implementation does not understand range requests\n\n\n    delete headers['if-range'];\n\n    if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n      // revalidation allowed via HEAD\n      // not for the same resource, or wasn't allowed to be cached anyway\n      delete headers['if-none-match'];\n      delete headers['if-modified-since'];\n      return headers;\n    }\n    /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n\n\n    if (this._resHeaders.etag) {\n      headers['if-none-match'] = headers['if-none-match'] ? `${headers['if-none-match']}, ${this._resHeaders.etag}` : this._resHeaders.etag;\n    } // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n\n\n    const forbidsWeakValidators = headers['accept-ranges'] || headers['if-match'] || headers['if-unmodified-since'] || this._method && this._method != 'GET';\n    /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n    Note: This implementation does not understand partial responses (206) */\n\n    if (forbidsWeakValidators) {\n      delete headers['if-modified-since'];\n\n      if (headers['if-none-match']) {\n        const etags = headers['if-none-match'].split(/,/).filter(etag => {\n          return !/^\\s*W\\//.test(etag);\n        });\n\n        if (!etags.length) {\n          delete headers['if-none-match'];\n        } else {\n          headers['if-none-match'] = etags.join(',').trim();\n        }\n      }\n    } else if (this._resHeaders['last-modified'] && !headers['if-modified-since']) {\n      headers['if-modified-since'] = this._resHeaders['last-modified'];\n    }\n\n    return headers;\n  }\n  /**\n   * Creates new CachePolicy with information combined from the previews response,\n   * and the new revalidation response.\n   *\n   * Returns {policy, modified} where modified is a boolean indicating\n   * whether the response body has been modified, and old cached body can't be used.\n   *\n   * @return {Object} {policy: CachePolicy, modified: Boolean}\n   */\n\n\n  revalidatedPolicy(request, response) {\n    this._assertRequestHasHeaders(request);\n\n    if (!response || !response.headers) {\n      throw Error('Response headers missing');\n    } // These aren't going to be supported exactly, since one CachePolicy object\n    // doesn't know about all the other cached objects.\n\n\n    let matches = false;\n\n    if (response.status !== undefined && response.status != 304) {\n      matches = false;\n    } else if (response.headers.etag && !/^\\s*W\\//.test(response.headers.etag)) {\n      // \"All of the stored responses with the same strong validator are selected.\n      // If none of the stored responses contain the same strong validator,\n      // then the cache MUST NOT use the new response to update any stored responses.\"\n      matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\\s*W\\//, '') === response.headers.etag;\n    } else if (this._resHeaders.etag && response.headers.etag) {\n      // \"If the new response contains a weak validator and that validator corresponds\n      // to one of the cache's stored responses,\n      // then the most recent of those matching stored responses is selected for update.\"\n      matches = this._resHeaders.etag.replace(/^\\s*W\\//, '') === response.headers.etag.replace(/^\\s*W\\//, '');\n    } else if (this._resHeaders['last-modified']) {\n      matches = this._resHeaders['last-modified'] === response.headers['last-modified'];\n    } else {\n      // If the new response does not include any form of validator (such as in the case where\n      // a client generates an If-Modified-Since request from a source other than the Last-Modified\n      // response header field), and there is only one stored response, and that stored response also\n      // lacks a validator, then that stored response is selected for update.\n      if (!this._resHeaders.etag && !this._resHeaders['last-modified'] && !response.headers.etag && !response.headers['last-modified']) {\n        matches = true;\n      }\n    }\n\n    if (!matches) {\n      return {\n        policy: new this.constructor(request, response),\n        // Client receiving 304 without body, even if it's invalid/mismatched has no option\n        // but to reuse a cached body. We don't have a good way to tell clients to do\n        // error recovery in such case.\n        modified: response.status != 304,\n        matches: false\n      };\n    } // use other header fields provided in the 304 (Not Modified) response to replace all instances\n    // of the corresponding header fields in the stored response.\n\n\n    const headers = {};\n\n    for (const k in this._resHeaders) {\n      headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];\n    }\n\n    const newResponse = Object.assign({}, response, {\n      status: this._status,\n      method: this._method,\n      headers\n    });\n    return {\n      policy: new this.constructor(request, newResponse, {\n        shared: this._isShared,\n        cacheHeuristic: this._cacheHeuristic,\n        immutableMinTimeToLive: this._immutableMinTtl,\n        trustServerDate: this._trustServerDate\n      }),\n      modified: false,\n      matches: true\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/meikaprince/Desktop/purrrfectPals/purrrfectpals/node_modules/http-cache-semantics/index.js"],"names":["statusCodeCacheableByDefault","understoodStatuses","hopByHopHeaders","date","connection","te","trailer","upgrade","excludedFromRevalidationUpdate","parseCacheControl","header","cc","parts","trim","split","part","k","v","undefined","replace","formatCacheControl","push","length","join","module","exports","CachePolicy","constructor","req","res","shared","cacheHeuristic","immutableMinTimeToLive","ignoreCargoCult","trustServerDate","_fromObject","headers","Error","_assertRequestHasHeaders","_responseTime","now","_isShared","_trustServerDate","_cacheHeuristic","_immutableMinTtl","_status","status","_resHeaders","_rescc","_method","method","_url","url","_host","host","_noAuthorization","authorization","_reqHeaders","vary","_reqcc","Object","assign","expires","pragma","test","Date","storable","_hasExplicitExpiration","indexOf","private","_allowsStoringAuthenticated","public","satisfiesWithoutRevalidation","requestCC","age","timeToLive","stale","allowsStale","maxAge","_requestMatches","allowHeadMethod","_varyMatches","fields","toLowerCase","name","_copyWithoutHopByHopHeaders","inHeaders","tokens","warning","warnings","filter","responseHeaders","Math","round","toUTCString","_serverDate","dateValue","parse","isFinite","maxClockDrift","clockDrift","abs","max","ageValue","_ageValue","residentTime","parseInt","immutable","defaultMinTtl","Number","isNaN","lastModified","fromObject","obj","t","sh","ch","imm","st","resh","rescc","m","u","h","a","reqh","reqcc","toObject","revalidationHeaders","incomingReq","etag","forbidsWeakValidators","etags","revalidatedPolicy","request","response","matches","policy","modified","newResponse"],"mappings":"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","sourcesContent":["'use strict';\n// rfc7231 6.1\nconst statusCodeCacheableByDefault = [\n    200,\n    203,\n    204,\n    206,\n    300,\n    301,\n    404,\n    405,\n    410,\n    414,\n    501,\n];\n\n// This implementation does not understand partial responses (206)\nconst understoodStatuses = [\n    200,\n    203,\n    204,\n    300,\n    301,\n    302,\n    303,\n    307,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501,\n];\n\nconst hopByHopHeaders = {\n    date: true, // included, because we add Age update Date\n    connection: true,\n    'keep-alive': true,\n    'proxy-authenticate': true,\n    'proxy-authorization': true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n};\nconst excludedFromRevalidationUpdate = {\n    // Since the old body is reused, it doesn't make sense to change properties of the body\n    'content-length': true,\n    'content-encoding': true,\n    'transfer-encoding': true,\n    'content-range': true,\n};\n\nfunction parseCacheControl(header) {\n    const cc = {};\n    if (!header) return cc;\n\n    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n    const parts = header.trim().split(/\\s*,\\s*/); // TODO: lame parsing\n    for (const part of parts) {\n        const [k, v] = part.split(/\\s*=\\s*/, 2);\n        cc[k] = v === undefined ? true : v.replace(/^\"|\"$/g, ''); // TODO: lame unquoting\n    }\n\n    return cc;\n}\n\nfunction formatCacheControl(cc) {\n    let parts = [];\n    for (const k in cc) {\n        const v = cc[k];\n        parts.push(v === true ? k : k + '=' + v);\n    }\n    if (!parts.length) {\n        return undefined;\n    }\n    return parts.join(', ');\n}\n\nmodule.exports = class CachePolicy {\n    constructor(\n        req,\n        res,\n        {\n            shared,\n            cacheHeuristic,\n            immutableMinTimeToLive,\n            ignoreCargoCult,\n            trustServerDate,\n            _fromObject,\n        } = {}\n    ) {\n        if (_fromObject) {\n            this._fromObject(_fromObject);\n            return;\n        }\n\n        if (!res || !res.headers) {\n            throw Error('Response headers missing');\n        }\n        this._assertRequestHasHeaders(req);\n\n        this._responseTime = this.now();\n        this._isShared = shared !== false;\n        this._trustServerDate =\n            undefined !== trustServerDate ? trustServerDate : true;\n        this._cacheHeuristic =\n            undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n        this._immutableMinTtl =\n            undefined !== immutableMinTimeToLive\n                ? immutableMinTimeToLive\n                : 24 * 3600 * 1000;\n\n        this._status = 'status' in res ? res.status : 200;\n        this._resHeaders = res.headers;\n        this._rescc = parseCacheControl(res.headers['cache-control']);\n        this._method = 'method' in req ? req.method : 'GET';\n        this._url = req.url;\n        this._host = req.headers.host;\n        this._noAuthorization = !req.headers.authorization;\n        this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n        this._reqcc = parseCacheControl(req.headers['cache-control']);\n\n        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n        // so there's no point stricly adhering to the blindly copy&pasted directives.\n        if (\n            ignoreCargoCult &&\n            'pre-check' in this._rescc &&\n            'post-check' in this._rescc\n        ) {\n            delete this._rescc['pre-check'];\n            delete this._rescc['post-check'];\n            delete this._rescc['no-cache'];\n            delete this._rescc['no-store'];\n            delete this._rescc['must-revalidate'];\n            this._resHeaders = Object.assign({}, this._resHeaders, {\n                'cache-control': formatCacheControl(this._rescc),\n            });\n            delete this._resHeaders.expires;\n            delete this._resHeaders.pragma;\n        }\n\n        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n        // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n        if (\n            res.headers['cache-control'] == null &&\n            /no-cache/.test(res.headers.pragma)\n        ) {\n            this._rescc['no-cache'] = true;\n        }\n    }\n\n    now() {\n        return Date.now();\n    }\n\n    storable() {\n        // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n        return !!(\n            !this._reqcc['no-store'] &&\n            // A cache MUST NOT store a response to any request, unless:\n            // The request method is understood by the cache and defined as being cacheable, and\n            ('GET' === this._method ||\n                'HEAD' === this._method ||\n                ('POST' === this._method && this._hasExplicitExpiration())) &&\n            // the response status code is understood by the cache, and\n            understoodStatuses.indexOf(this._status) !== -1 &&\n            // the \"no-store\" cache directive does not appear in request or response header fields, and\n            !this._rescc['no-store'] &&\n            // the \"private\" response directive does not appear in the response, if the cache is shared, and\n            (!this._isShared || !this._rescc.private) &&\n            // the Authorization header field does not appear in the request, if the cache is shared,\n            (!this._isShared ||\n                this._noAuthorization ||\n                this._allowsStoringAuthenticated()) &&\n            // the response either:\n            // contains an Expires header field, or\n            (this._resHeaders.expires ||\n                // contains a max-age response directive, or\n                // contains a s-maxage response directive and the cache is shared, or\n                // contains a public response directive.\n                this._rescc.public ||\n                this._rescc['max-age'] ||\n                this._rescc['s-maxage'] ||\n                // has a status code that is defined as cacheable by default\n                statusCodeCacheableByDefault.indexOf(this._status) !== -1)\n        );\n    }\n\n    _hasExplicitExpiration() {\n        // 4.2.1 Calculating Freshness Lifetime\n        return (\n            (this._isShared && this._rescc['s-maxage']) ||\n            this._rescc['max-age'] ||\n            this._resHeaders.expires\n        );\n    }\n\n    _assertRequestHasHeaders(req) {\n        if (!req || !req.headers) {\n            throw Error('Request headers missing');\n        }\n    }\n\n    satisfiesWithoutRevalidation(req) {\n        this._assertRequestHasHeaders(req);\n\n        // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n        // unless the stored response is successfully validated (Section 4.3), and\n        const requestCC = parseCacheControl(req.headers['cache-control']);\n        if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n            return false;\n        }\n\n        if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n            return false;\n        }\n\n        if (\n            requestCC['min-fresh'] &&\n            this.timeToLive() < 1000 * requestCC['min-fresh']\n        ) {\n            return false;\n        }\n\n        // the stored response is either:\n        // fresh, or allowed to be served stale\n        if (this.stale()) {\n            const allowsStale =\n                requestCC['max-stale'] &&\n                !this._rescc['must-revalidate'] &&\n                (true === requestCC['max-stale'] ||\n                    requestCC['max-stale'] > this.age() - this.maxAge());\n            if (!allowsStale) {\n                return false;\n            }\n        }\n\n        return this._requestMatches(req, false);\n    }\n\n    _requestMatches(req, allowHeadMethod) {\n        // The presented effective request URI and that of the stored response match, and\n        return (\n            (!this._url || this._url === req.url) &&\n            this._host === req.headers.host &&\n            // the request method associated with the stored response allows it to be used for the presented request, and\n            (!req.method ||\n                this._method === req.method ||\n                (allowHeadMethod && 'HEAD' === req.method)) &&\n            // selecting header fields nominated by the stored response (if any) match those presented, and\n            this._varyMatches(req)\n        );\n    }\n\n    _allowsStoringAuthenticated() {\n        //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n        return (\n            this._rescc['must-revalidate'] ||\n            this._rescc.public ||\n            this._rescc['s-maxage']\n        );\n    }\n\n    _varyMatches(req) {\n        if (!this._resHeaders.vary) {\n            return true;\n        }\n\n        // A Vary header field-value of \"*\" always fails to match\n        if (this._resHeaders.vary === '*') {\n            return false;\n        }\n\n        const fields = this._resHeaders.vary\n            .trim()\n            .toLowerCase()\n            .split(/\\s*,\\s*/);\n        for (const name of fields) {\n            if (req.headers[name] !== this._reqHeaders[name]) return false;\n        }\n        return true;\n    }\n\n    _copyWithoutHopByHopHeaders(inHeaders) {\n        const headers = {};\n        for (const name in inHeaders) {\n            if (hopByHopHeaders[name]) continue;\n            headers[name] = inHeaders[name];\n        }\n        // 9.1.  Connection\n        if (inHeaders.connection) {\n            const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n            for (const name of tokens) {\n                delete headers[name];\n            }\n        }\n        if (headers.warning) {\n            const warnings = headers.warning.split(/,/).filter(warning => {\n                return !/^\\s*1[0-9][0-9]/.test(warning);\n            });\n            if (!warnings.length) {\n                delete headers.warning;\n            } else {\n                headers.warning = warnings.join(',').trim();\n            }\n        }\n        return headers;\n    }\n\n    responseHeaders() {\n        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n        const age = this.age();\n\n        // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n        // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n        if (\n            age > 3600 * 24 &&\n            !this._hasExplicitExpiration() &&\n            this.maxAge() > 3600 * 24\n        ) {\n            headers.warning =\n                (headers.warning ? `${headers.warning}, ` : '') +\n                '113 - \"rfc7234 5.5.4\"';\n        }\n        headers.age = `${Math.round(age)}`;\n        headers.date = new Date(this.now()).toUTCString();\n        return headers;\n    }\n\n    /**\n     * Value of the Date response header or current time if Date was demed invalid\n     * @return timestamp\n     */\n    date() {\n        if (this._trustServerDate) {\n            return this._serverDate();\n        }\n        return this._responseTime;\n    }\n\n    _serverDate() {\n        const dateValue = Date.parse(this._resHeaders.date);\n        if (isFinite(dateValue)) {\n            const maxClockDrift = 8 * 3600 * 1000;\n            const clockDrift = Math.abs(this._responseTime - dateValue);\n            if (clockDrift < maxClockDrift) {\n                return dateValue;\n            }\n        }\n        return this._responseTime;\n    }\n\n    /**\n     * Value of the Age header, in seconds, updated for the current time.\n     * May be fractional.\n     *\n     * @return Number\n     */\n    age() {\n        let age = Math.max(0, (this._responseTime - this.date()) / 1000);\n        if (this._resHeaders.age) {\n            let ageValue = this._ageValue();\n            if (ageValue > age) age = ageValue;\n        }\n\n        const residentTime = (this.now() - this._responseTime) / 1000;\n        return age + residentTime;\n    }\n\n    _ageValue() {\n        const ageValue = parseInt(this._resHeaders.age);\n        return isFinite(ageValue) ? ageValue : 0;\n    }\n\n    /**\n     * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n     *\n     * For an up-to-date value, see `timeToLive()`.\n     *\n     * @return Number\n     */\n    maxAge() {\n        if (!this.storable() || this._rescc['no-cache']) {\n            return 0;\n        }\n\n        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n        // so this implementation requires explicit opt-in via public header\n        if (\n            this._isShared &&\n            (this._resHeaders['set-cookie'] &&\n                !this._rescc.public &&\n                !this._rescc.immutable)\n        ) {\n            return 0;\n        }\n\n        if (this._resHeaders.vary === '*') {\n            return 0;\n        }\n\n        if (this._isShared) {\n            if (this._rescc['proxy-revalidate']) {\n                return 0;\n            }\n            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n            if (this._rescc['s-maxage']) {\n                return parseInt(this._rescc['s-maxage'], 10);\n            }\n        }\n\n        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n        if (this._rescc['max-age']) {\n            return parseInt(this._rescc['max-age'], 10);\n        }\n\n        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n\n        const dateValue = this._serverDate();\n        if (this._resHeaders.expires) {\n            const expires = Date.parse(this._resHeaders.expires);\n            // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n            if (Number.isNaN(expires) || expires < dateValue) {\n                return 0;\n            }\n            return Math.max(defaultMinTtl, (expires - dateValue) / 1000);\n        }\n\n        if (this._resHeaders['last-modified']) {\n            const lastModified = Date.parse(this._resHeaders['last-modified']);\n            if (isFinite(lastModified) && dateValue > lastModified) {\n                return Math.max(\n                    defaultMinTtl,\n                    ((dateValue - lastModified) / 1000) * this._cacheHeuristic\n                );\n            }\n        }\n\n        return defaultMinTtl;\n    }\n\n    timeToLive() {\n        return Math.max(0, this.maxAge() - this.age()) * 1000;\n    }\n\n    stale() {\n        return this.maxAge() <= this.age();\n    }\n\n    static fromObject(obj) {\n        return new this(undefined, undefined, { _fromObject: obj });\n    }\n\n    _fromObject(obj) {\n        if (this._responseTime) throw Error('Reinitialized');\n        if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n\n        this._responseTime = obj.t;\n        this._isShared = obj.sh;\n        this._cacheHeuristic = obj.ch;\n        this._immutableMinTtl =\n            obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n        this._status = obj.st;\n        this._resHeaders = obj.resh;\n        this._rescc = obj.rescc;\n        this._method = obj.m;\n        this._url = obj.u;\n        this._host = obj.h;\n        this._noAuthorization = obj.a;\n        this._reqHeaders = obj.reqh;\n        this._reqcc = obj.reqcc;\n    }\n\n    toObject() {\n        return {\n            v: 1,\n            t: this._responseTime,\n            sh: this._isShared,\n            ch: this._cacheHeuristic,\n            imm: this._immutableMinTtl,\n            st: this._status,\n            resh: this._resHeaders,\n            rescc: this._rescc,\n            m: this._method,\n            u: this._url,\n            h: this._host,\n            a: this._noAuthorization,\n            reqh: this._reqHeaders,\n            reqcc: this._reqcc,\n        };\n    }\n\n    /**\n     * Headers for sending to the origin server to revalidate stale response.\n     * Allows server to return 304 to allow reuse of the previous response.\n     *\n     * Hop by hop headers are always stripped.\n     * Revalidation headers may be added or removed, depending on request.\n     */\n    revalidationHeaders(incomingReq) {\n        this._assertRequestHasHeaders(incomingReq);\n        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n\n        // This implementation does not understand range requests\n        delete headers['if-range'];\n\n        if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n            // revalidation allowed via HEAD\n            // not for the same resource, or wasn't allowed to be cached anyway\n            delete headers['if-none-match'];\n            delete headers['if-modified-since'];\n            return headers;\n        }\n\n        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n        if (this._resHeaders.etag) {\n            headers['if-none-match'] = headers['if-none-match']\n                ? `${headers['if-none-match']}, ${this._resHeaders.etag}`\n                : this._resHeaders.etag;\n        }\n\n        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n        const forbidsWeakValidators =\n            headers['accept-ranges'] ||\n            headers['if-match'] ||\n            headers['if-unmodified-since'] ||\n            (this._method && this._method != 'GET');\n\n        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n        Note: This implementation does not understand partial responses (206) */\n        if (forbidsWeakValidators) {\n            delete headers['if-modified-since'];\n\n            if (headers['if-none-match']) {\n                const etags = headers['if-none-match']\n                    .split(/,/)\n                    .filter(etag => {\n                        return !/^\\s*W\\//.test(etag);\n                    });\n                if (!etags.length) {\n                    delete headers['if-none-match'];\n                } else {\n                    headers['if-none-match'] = etags.join(',').trim();\n                }\n            }\n        } else if (\n            this._resHeaders['last-modified'] &&\n            !headers['if-modified-since']\n        ) {\n            headers['if-modified-since'] = this._resHeaders['last-modified'];\n        }\n\n        return headers;\n    }\n\n    /**\n     * Creates new CachePolicy with information combined from the previews response,\n     * and the new revalidation response.\n     *\n     * Returns {policy, modified} where modified is a boolean indicating\n     * whether the response body has been modified, and old cached body can't be used.\n     *\n     * @return {Object} {policy: CachePolicy, modified: Boolean}\n     */\n    revalidatedPolicy(request, response) {\n        this._assertRequestHasHeaders(request);\n        if (!response || !response.headers) {\n            throw Error('Response headers missing');\n        }\n\n        // These aren't going to be supported exactly, since one CachePolicy object\n        // doesn't know about all the other cached objects.\n        let matches = false;\n        if (response.status !== undefined && response.status != 304) {\n            matches = false;\n        } else if (\n            response.headers.etag &&\n            !/^\\s*W\\//.test(response.headers.etag)\n        ) {\n            // \"All of the stored responses with the same strong validator are selected.\n            // If none of the stored responses contain the same strong validator,\n            // then the cache MUST NOT use the new response to update any stored responses.\"\n            matches =\n                this._resHeaders.etag &&\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                    response.headers.etag;\n        } else if (this._resHeaders.etag && response.headers.etag) {\n            // \"If the new response contains a weak validator and that validator corresponds\n            // to one of the cache's stored responses,\n            // then the most recent of those matching stored responses is selected for update.\"\n            matches =\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                response.headers.etag.replace(/^\\s*W\\//, '');\n        } else if (this._resHeaders['last-modified']) {\n            matches =\n                this._resHeaders['last-modified'] ===\n                response.headers['last-modified'];\n        } else {\n            // If the new response does not include any form of validator (such as in the case where\n            // a client generates an If-Modified-Since request from a source other than the Last-Modified\n            // response header field), and there is only one stored response, and that stored response also\n            // lacks a validator, then that stored response is selected for update.\n            if (\n                !this._resHeaders.etag &&\n                !this._resHeaders['last-modified'] &&\n                !response.headers.etag &&\n                !response.headers['last-modified']\n            ) {\n                matches = true;\n            }\n        }\n\n        if (!matches) {\n            return {\n                policy: new this.constructor(request, response),\n                // Client receiving 304 without body, even if it's invalid/mismatched has no option\n                // but to reuse a cached body. We don't have a good way to tell clients to do\n                // error recovery in such case.\n                modified: response.status != 304,\n                matches: false,\n            };\n        }\n\n        // use other header fields provided in the 304 (Not Modified) response to replace all instances\n        // of the corresponding header fields in the stored response.\n        const headers = {};\n        for (const k in this._resHeaders) {\n            headers[k] =\n                k in response.headers && !excludedFromRevalidationUpdate[k]\n                    ? response.headers[k]\n                    : this._resHeaders[k];\n        }\n\n        const newResponse = Object.assign({}, response, {\n            status: this._status,\n            method: this._method,\n            headers,\n        });\n        return {\n            policy: new this.constructor(request, newResponse, {\n                shared: this._isShared,\n                cacheHeuristic: this._cacheHeuristic,\n                immutableMinTimeToLive: this._immutableMinTtl,\n                trustServerDate: this._trustServerDate,\n            }),\n            modified: false,\n            matches: true,\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}