{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar jwt = require(\"jsonwebtoken\");\n\nvar common_1 = require(\"./common\");\n\nvar DEFAULT_TOKEN_EXPIRY = 24 * 60 * 60;\nvar CLIENT_CREDENTIALS_GRANT_TYPE = 'client_credentials';\nvar REFRESH_TOKEN_GRANT_TYPE = 'refresh_token';\n\nvar Authenticator =\n/** @class */\nfunction () {\n  function Authenticator(instanceId, instanceKeyId, instanceKeySecret, // Customise token expiry\n  tokenExpiry) {\n    this.instanceId = instanceId;\n    this.instanceKeyId = instanceKeyId;\n    this.instanceKeySecret = instanceKeySecret;\n    this.tokenExpiry = tokenExpiry;\n\n    if (!this.tokenExpiry) {\n      this.tokenExpiry = DEFAULT_TOKEN_EXPIRY;\n    }\n  }\n\n  Authenticator.prototype.authenticate = function (authenticatePayload, options) {\n    var grantType = authenticatePayload['grant_type'];\n\n    if (grantType !== CLIENT_CREDENTIALS_GRANT_TYPE) {\n      return new common_1.AuthenticationResponse({\n        status: 422,\n        body: {\n          error: 'token_provider/invalid_grant_type',\n          error_description: \"The grant_type provided, \" + grantType + \", is unsupported\"\n        }\n      });\n    }\n\n    return this.authenticateUsingClientCredentials(options);\n  };\n\n  Authenticator.prototype.authenticateWithRefreshToken = function (authenticatePayload, options) {\n    var grantType = authenticatePayload['grant_type'];\n\n    switch (grantType) {\n      case CLIENT_CREDENTIALS_GRANT_TYPE:\n        return this.authenticateUsingClientCredentials(options, true);\n\n      case REFRESH_TOKEN_GRANT_TYPE:\n        var oldRefreshToken = authenticatePayload[REFRESH_TOKEN_GRANT_TYPE];\n        return this.authenticateUsingRefreshToken(oldRefreshToken, options);\n\n      default:\n        return new common_1.AuthenticationResponse({\n          status: 422,\n          body: {\n            error: 'token_provider/invalid_grant_type',\n            error_description: \"The grant_type provided, \" + grantType + \", is unsupported\"\n          }\n        });\n    }\n  };\n\n  Authenticator.prototype.authenticateUsingClientCredentials = function (options, withRefreshToken) {\n    if (withRefreshToken === void 0) {\n      withRefreshToken = false;\n    }\n\n    var token = this.generateAccessToken(options).token;\n    var tokenExpiry = options.tokenExpiry || this.tokenExpiry;\n    var body = {\n      access_token: token,\n      expires_in: tokenExpiry,\n      token_type: 'bearer'\n    };\n\n    if (withRefreshToken) {\n      var refreshToken = this.generateRefreshToken(options);\n      body['refresh_token'] = refreshToken.token;\n    }\n\n    return new common_1.AuthenticationResponse({\n      status: 200,\n      body: body\n    });\n  };\n\n  Authenticator.prototype.authenticateUsingRefreshToken = function (oldRefreshToken, options) {\n    var decoded;\n    var tokenExpiry = options.tokenExpiry || this.tokenExpiry;\n\n    try {\n      decoded = jwt.verify(oldRefreshToken, this.instanceKeySecret, {\n        issuer: \"api_keys/\" + this.instanceKeyId\n      });\n    } catch (e) {\n      var description = e instanceof jwt.TokenExpiredError ? 'Refresh token has expired' : 'Refresh token is invalid';\n      return new common_1.AuthenticationResponse({\n        status: 401,\n        body: {\n          error: 'token_provider/invalid_refresh_token',\n          error_description: description\n        }\n      });\n    }\n\n    if (decoded.refresh !== true) {\n      return new common_1.AuthenticationResponse({\n        status: 401,\n        body: {\n          error: 'token_provider/invalid_refresh_token',\n          error_description: 'Refresh token does not have a refresh claim'\n        }\n      });\n    }\n\n    if (options.userId !== decoded.sub) {\n      return new common_1.AuthenticationResponse({\n        status: 401,\n        body: {\n          error: 'token_provider/invalid_refresh_token',\n          error_description: 'Refresh token has an invalid user id'\n        }\n      });\n    }\n\n    var newAccessToken = this.generateAccessToken(options);\n    var newRefreshToken = this.generateRefreshToken(options);\n    return new common_1.AuthenticationResponse({\n      status: 200,\n      body: {\n        access_token: newAccessToken.token,\n        token_type: 'bearer',\n        expires_in: tokenExpiry,\n        refresh_token: newRefreshToken.token\n      }\n    });\n  };\n\n  Authenticator.prototype.generateAccessToken = function (options) {\n    var now = Math.floor(Date.now() / 1000);\n    var tokenExpiry = options.tokenExpiry || this.tokenExpiry;\n\n    var claims = __assign({\n      instance: this.instanceId,\n      iss: \"api_keys/\" + this.instanceKeyId,\n      iat: now,\n      exp: now + tokenExpiry,\n      sub: options.userId,\n      su: options.su\n    }, options.serviceClaims);\n\n    return {\n      token: jwt.sign(claims, this.instanceKeySecret),\n      expires_in: tokenExpiry\n    };\n  };\n\n  Authenticator.prototype.generateRefreshToken = function (options) {\n    var now = Math.floor(Date.now() / 1000);\n    var claims = {\n      instance: this.instanceId,\n      iss: \"api_keys/\" + this.instanceKeyId,\n      iat: now,\n      refresh: true,\n      sub: options.userId\n    };\n    return {\n      token: jwt.sign(claims, this.instanceKeySecret)\n    };\n  };\n\n  return Authenticator;\n}();\n\nexports.default = Authenticator;","map":{"version":3,"sources":["../src/authenticator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jwt = require(\"jsonwebtoken\");\nvar common_1 = require(\"./common\");\nvar DEFAULT_TOKEN_EXPIRY = 24 * 60 * 60;\nvar CLIENT_CREDENTIALS_GRANT_TYPE = 'client_credentials';\nvar REFRESH_TOKEN_GRANT_TYPE = 'refresh_token';\nvar Authenticator = /** @class */ (function () {\n    function Authenticator(instanceId, instanceKeyId, instanceKeySecret, \n    // Customise token expiry\n    tokenExpiry) {\n        this.instanceId = instanceId;\n        this.instanceKeyId = instanceKeyId;\n        this.instanceKeySecret = instanceKeySecret;\n        this.tokenExpiry = tokenExpiry;\n        if (!this.tokenExpiry) {\n            this.tokenExpiry = DEFAULT_TOKEN_EXPIRY;\n        }\n    }\n    Authenticator.prototype.authenticate = function (authenticatePayload, options) {\n        var grantType = authenticatePayload['grant_type'];\n        if (grantType !== CLIENT_CREDENTIALS_GRANT_TYPE) {\n            return new common_1.AuthenticationResponse({\n                status: 422,\n                body: {\n                    error: 'token_provider/invalid_grant_type',\n                    error_description: \"The grant_type provided, \" + grantType + \", is unsupported\",\n                }\n            });\n        }\n        return this.authenticateUsingClientCredentials(options);\n    };\n    Authenticator.prototype.authenticateWithRefreshToken = function (authenticatePayload, options) {\n        var grantType = authenticatePayload['grant_type'];\n        switch (grantType) {\n            case CLIENT_CREDENTIALS_GRANT_TYPE:\n                return this.authenticateUsingClientCredentials(options, true);\n            case REFRESH_TOKEN_GRANT_TYPE:\n                var oldRefreshToken = authenticatePayload[REFRESH_TOKEN_GRANT_TYPE];\n                return this.authenticateUsingRefreshToken(oldRefreshToken, options);\n            default:\n                return new common_1.AuthenticationResponse({\n                    status: 422,\n                    body: {\n                        error: 'token_provider/invalid_grant_type',\n                        error_description: \"The grant_type provided, \" + grantType + \", is unsupported\",\n                    }\n                });\n        }\n    };\n    Authenticator.prototype.authenticateUsingClientCredentials = function (options, withRefreshToken) {\n        if (withRefreshToken === void 0) { withRefreshToken = false; }\n        var token = this.generateAccessToken(options).token;\n        var tokenExpiry = options.tokenExpiry || this.tokenExpiry;\n        var body = {\n            access_token: token,\n            expires_in: tokenExpiry,\n            token_type: 'bearer',\n        };\n        if (withRefreshToken) {\n            var refreshToken = this.generateRefreshToken(options);\n            body['refresh_token'] = refreshToken.token;\n        }\n        return new common_1.AuthenticationResponse({\n            status: 200,\n            body: body\n        });\n    };\n    Authenticator.prototype.authenticateUsingRefreshToken = function (oldRefreshToken, options) {\n        var decoded;\n        var tokenExpiry = options.tokenExpiry || this.tokenExpiry;\n        try {\n            decoded = jwt.verify(oldRefreshToken, this.instanceKeySecret, {\n                issuer: \"api_keys/\" + this.instanceKeyId,\n            });\n        }\n        catch (e) {\n            var description = (e instanceof jwt.TokenExpiredError) ? 'Refresh token has expired' : 'Refresh token is invalid';\n            return new common_1.AuthenticationResponse({\n                status: 401,\n                body: {\n                    error: 'token_provider/invalid_refresh_token',\n                    error_description: description,\n                }\n            });\n        }\n        if (decoded.refresh !== true) {\n            return new common_1.AuthenticationResponse({\n                status: 401,\n                body: {\n                    error: 'token_provider/invalid_refresh_token',\n                    error_description: 'Refresh token does not have a refresh claim',\n                }\n            });\n        }\n        if (options.userId !== decoded.sub) {\n            return new common_1.AuthenticationResponse({\n                status: 401,\n                body: {\n                    error: 'token_provider/invalid_refresh_token',\n                    error_description: 'Refresh token has an invalid user id',\n                }\n            });\n        }\n        var newAccessToken = this.generateAccessToken(options);\n        var newRefreshToken = this.generateRefreshToken(options);\n        return new common_1.AuthenticationResponse({\n            status: 200,\n            body: {\n                access_token: newAccessToken.token,\n                token_type: 'bearer',\n                expires_in: tokenExpiry,\n                refresh_token: newRefreshToken.token,\n            }\n        });\n    };\n    Authenticator.prototype.generateAccessToken = function (options) {\n        var now = Math.floor(Date.now() / 1000);\n        var tokenExpiry = options.tokenExpiry || this.tokenExpiry;\n        var claims = __assign({ instance: this.instanceId, iss: \"api_keys/\" + this.instanceKeyId, iat: now, exp: now + tokenExpiry, sub: options.userId, su: options.su }, options.serviceClaims);\n        return {\n            token: jwt.sign(claims, this.instanceKeySecret),\n            expires_in: tokenExpiry,\n        };\n    };\n    Authenticator.prototype.generateRefreshToken = function (options) {\n        var now = Math.floor(Date.now() / 1000);\n        var claims = {\n            instance: this.instanceId,\n            iss: \"api_keys/\" + this.instanceKeyId,\n            iat: now,\n            refresh: true,\n            sub: options.userId,\n        };\n        return {\n            token: jwt.sign(claims, this.instanceKeySecret),\n        };\n    };\n    return Authenticator;\n}());\nexports.default = Authenticator;\n//# sourceMappingURL=authenticator.js.map"]},"metadata":{},"sourceType":"script"}