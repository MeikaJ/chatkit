{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar HttpRequest = require(\"request\");\n\nvar url_1 = require(\"url\");\n\nvar common_1 = require(\"./common\");\n\nvar BaseClient =\n/** @class */\nfunction () {\n  function BaseClient(options) {\n    this.host = options.host;\n    this.port = options.port;\n    this.serviceName = options.serviceName;\n    this.serviceVersion = options.serviceVersion;\n    this.instanceId = options.instanceId;\n    this.sdkInfo = options.sdkInfo;\n  }\n  /**\n   * Make a HTTPS request to a service running on Elements.\n   * It will construct a valid elements URL from its serviceName, serviceVersion,\n   * and instanceId that were passed to the Instance at construction time.\n   */\n\n\n  BaseClient.prototype.request = function (options) {\n    var headers = this.sdkInfo.headers;\n\n    if (options.headers) {\n      for (var key in options.headers) {\n        headers[key] = options.headers[key];\n      }\n    }\n\n    if (options.jwt) {\n      headers['Authorization'] = \"Bearer \" + options.jwt;\n    }\n\n    var path = this.sanitizePath(\"services/\" + this.serviceName + \"/\" + this.serviceVersion + \"/\" + this.instanceId + \"/\" + options.path);\n    var host = url_1.format({\n      protocol: 'https',\n      hostname: this.host,\n      port: this.port,\n      pathname: path\n    });\n    return new Promise(function (resolve, reject) {\n      HttpRequest(host, {\n        body: JSON.stringify(options.body),\n        headers: headers,\n        method: options.method,\n        qs: options.qs,\n        useQuerystring: options.useQuerystring || false,\n        forever: true\n      }, function (error, response, body) {\n        if (error) {\n          reject(error);\n        } else {\n          var statusCode = response.statusCode;\n\n          if (statusCode >= 200 && statusCode <= 299) {\n            response.body = body;\n            resolve(response);\n          } else if (statusCode >= 300 && statusCode <= 399) {\n            reject(new Error(\"Unsupported Redirect Response: \" + statusCode));\n          } else if (statusCode >= 400 && statusCode <= 599) {\n            var statusCode_1 = response.statusCode,\n                headers_1 = response.headers;\n            var errJson = void 0;\n\n            try {\n              errJson = JSON.parse(body);\n            } catch (_) {\n              return reject(new common_1.ErrorResponse({\n                error: 'Something went wrong, but could not parse the response',\n                error_description: '',\n                status: statusCode_1\n              }));\n            }\n\n            var error_1 = errJson.error,\n                error_description = errJson.error_description,\n                error_uri = errJson.error_uri;\n            reject(new common_1.ErrorResponse({\n              error: error_1,\n              error_description: error_description,\n              error_uri: error_uri,\n              headers: headers_1,\n              status: statusCode_1\n            }));\n          } else {\n            reject(new Error(\"Unsupported Response Code: \" + statusCode));\n          }\n        }\n      });\n    });\n  }; //Cleans up the path provided\n\n\n  BaseClient.prototype.sanitizePath = function (path) {\n    return path.replace(/\\/ /g, \"/\") //Replace space after a slash\n    .replace(/ $/, \"\") //Remove the trailing space\n    .replace(/[\\/]{2,}/g, \"/\") //Multiple slashes are now single slashes\n    .replace(/\\/$/, \"\"); //Remove trailing slash\n  };\n\n  return BaseClient;\n}();\n\nexports.default = BaseClient;","map":{"version":3,"sources":["../src/base_client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HttpRequest = require(\"request\");\nvar url_1 = require(\"url\");\nvar common_1 = require(\"./common\");\nvar BaseClient = /** @class */ (function () {\n    function BaseClient(options) {\n        this.host = options.host;\n        this.port = options.port;\n        this.serviceName = options.serviceName;\n        this.serviceVersion = options.serviceVersion;\n        this.instanceId = options.instanceId;\n        this.sdkInfo = options.sdkInfo;\n    }\n    /**\n     * Make a HTTPS request to a service running on Elements.\n     * It will construct a valid elements URL from its serviceName, serviceVersion,\n     * and instanceId that were passed to the Instance at construction time.\n     */\n    BaseClient.prototype.request = function (options) {\n        var headers = this.sdkInfo.headers;\n        if (options.headers) {\n            for (var key in options.headers) {\n                headers[key] = options.headers[key];\n            }\n        }\n        if (options.jwt) {\n            headers['Authorization'] = \"Bearer \" + options.jwt;\n        }\n        var path = this.sanitizePath(\"services/\" + this.serviceName + \"/\" + this.serviceVersion + \"/\" + this.instanceId + \"/\" + options.path);\n        var host = url_1.format({\n            protocol: 'https',\n            hostname: this.host,\n            port: this.port,\n            pathname: path\n        });\n        return new Promise(function (resolve, reject) {\n            HttpRequest(host, {\n                body: JSON.stringify(options.body),\n                headers: headers,\n                method: options.method,\n                qs: options.qs,\n                useQuerystring: options.useQuerystring || false,\n                forever: true\n            }, function (error, response, body) {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    var statusCode = response.statusCode;\n                    if (statusCode >= 200 && statusCode <= 299) {\n                        response.body = body;\n                        resolve(response);\n                    }\n                    else if (statusCode >= 300 && statusCode <= 399) {\n                        reject(new Error(\"Unsupported Redirect Response: \" + statusCode));\n                    }\n                    else if (statusCode >= 400 && statusCode <= 599) {\n                        var statusCode_1 = response.statusCode, headers_1 = response.headers;\n                        var errJson = void 0;\n                        try {\n                            errJson = JSON.parse(body);\n                        }\n                        catch (_) {\n                            return reject(new common_1.ErrorResponse({\n                                error: 'Something went wrong, but could not parse the response',\n                                error_description: '',\n                                status: statusCode_1\n                            }));\n                        }\n                        var error_1 = errJson.error, error_description = errJson.error_description, error_uri = errJson.error_uri;\n                        reject(new common_1.ErrorResponse({\n                            error: error_1,\n                            error_description: error_description,\n                            error_uri: error_uri,\n                            headers: headers_1,\n                            status: statusCode_1,\n                        }));\n                    }\n                    else {\n                        reject(new Error(\"Unsupported Response Code: \" + statusCode));\n                    }\n                }\n            });\n        });\n    };\n    //Cleans up the path provided\n    BaseClient.prototype.sanitizePath = function (path) {\n        return path\n            .replace(/\\/ /g, \"/\") //Replace space after a slash\n            .replace(/ $/, \"\") //Remove the trailing space\n            .replace(/[\\/]{2,}/g, \"/\") //Multiple slashes are now single slashes\n            .replace(/\\/$/, \"\"); //Remove trailing slash\n    };\n    return BaseClient;\n}());\nexports.default = BaseClient;\n//# sourceMappingURL=base_client.js.map"]},"metadata":{},"sourceType":"script"}