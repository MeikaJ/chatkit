{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst got_1 = require(\"got\");\n\nconst platform_node_1 = require(\"@pusher/platform-node\");\n\nconst utils_1 = require(\"./utils\");\n\nconst package_json_1 = __importDefault(require(\"../package.json\"));\n\nconst TOKEN_EXPIRY_LEEWAY = 30;\n\nclass Chatkit {\n  constructor(options) {\n    const instanceLocator = options.instanceLocator,\n          key = options.key,\n          port = options.port,\n          host = options.host,\n          client = options.client;\n    const sdkInfo = new platform_node_1.SDKInfo({\n      productName: \"chatkit\",\n      version: package_json_1.default.version\n    });\n    const instanceOptions = {\n      locator: instanceLocator,\n      key,\n      port,\n      host,\n      client,\n      sdkInfo\n    };\n\n    const serverInstanceOptions = version => Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit\",\n      serviceVersion: version\n    });\n\n    const authorizerInstanceOptions = Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit_authorizer\",\n      serviceVersion: \"v2\"\n    });\n    const cursorsInstanceOptions = Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit_cursors\",\n      serviceVersion: \"v2\"\n    });\n    const schedulerInstanceOptions = Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit_scheduler\",\n      serviceVersion: \"v1\"\n    });\n    this.instanceLocator = instanceLocator;\n    this.serverInstanceV2 = new platform_node_1.Instance(serverInstanceOptions(\"v2\"));\n    this.serverInstance = new platform_node_1.Instance(serverInstanceOptions(\"v6\"));\n    this.authorizerInstance = new platform_node_1.Instance(authorizerInstanceOptions);\n    this.cursorsInstance = new platform_node_1.Instance(cursorsInstanceOptions);\n    this.schedulerInstance = new platform_node_1.Instance(schedulerInstanceOptions);\n  } // Token generation\n\n\n  authenticate(options) {\n    const userId = options.userId,\n          authPayload = options.authPayload;\n    return this.serverInstance.authenticate(authPayload || {\n      grant_type: \"client_credentials\"\n    }, {\n      userId\n    });\n  } // Used internally - not designed to be used externally\n\n\n  generateAccessToken(options) {\n    return this.serverInstance.generateAccessToken(options);\n  } // User interactions\n\n\n  createUser(options) {\n    const id = options.id,\n          name = options.name;\n    return this.serverInstance.request({\n      method: \"POST\",\n      path: `/users`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        id,\n        name,\n        avatar_url: options.avatarURL,\n        custom_data: options.customData\n      },\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  createUsers(options) {\n    const users = options.users.map(user => {\n      const id = user.id,\n            name = user.name;\n      return {\n        id,\n        name,\n        avatar_url: user.avatarURL,\n        custom_data: user.customData\n      };\n    });\n    return this.serverInstance.request({\n      method: \"POST\",\n      path: `/batch_users`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        users\n      },\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  updateUser(options) {\n    const jwt = this.generateAccessToken({\n      su: true,\n      userId: options.id\n    });\n    let updatePayload = {};\n\n    if (options.name) {\n      updatePayload.name = options.name;\n    }\n\n    if (options.avatarURL) {\n      updatePayload.avatar_url = options.avatarURL;\n    }\n\n    if (options.customData) {\n      updatePayload.custom_data = options.customData;\n    }\n\n    return this.serverInstance.request({\n      method: \"PUT\",\n      path: `/users/${options.id}`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: updatePayload,\n      jwt: jwt.token\n    }).then(() => {});\n  }\n\n  deleteUser(options) {\n    return this.serverInstance.request({\n      method: \"DELETE\",\n      path: `/users/${options.userId}`,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getUser(options) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: `/users/${encodeURIComponent(options.id)}`,\n      jwt: this.getServerToken()\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  getUsers(options = {}) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: `/users`,\n      qs: {\n        from_ts: options.fromTimestamp,\n        limit: options.limit\n      },\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  getUsersById(options) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: `/users_by_ids`,\n      qs: {\n        id: options.userIds\n      },\n      useQuerystring: true,\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  } // Room interactions\n\n\n  getRoom(options) {\n    const jwt = this.generateAccessToken({\n      su: true\n    });\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}`,\n      jwt: jwt.token\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  sendMessage(options) {\n    let messagePayload = {\n      text: options.text\n    };\n\n    if (options.attachment) {\n      messagePayload.attachment = {\n        resource_link: options.attachment.resourceLink,\n        type: options.attachment.type\n      };\n    }\n\n    return this.serverInstanceV2.request({\n      method: \"POST\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}/messages`,\n      jwt: this.generateAccessToken({\n        su: true,\n        userId: options.userId\n      }).token,\n      body: messagePayload\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  sendSimpleMessage(options) {\n    return this.sendMultipartMessage({\n      roomId: options.roomId,\n      userId: options.userId,\n      parts: [{\n        type: \"text/plain\",\n        content: options.text\n      }]\n    });\n  }\n\n  sendMultipartMessage(options) {\n    if (options.parts.length === 0) {\n      return Promise.reject(new TypeError(\"message must contain at least one part\"));\n    }\n\n    return Promise.all(options.parts.map(part => part.file ? this.uploadAttachment({\n      userId: options.userId,\n      roomId: options.roomId,\n      part\n    }) : part)).then(parts => this.serverInstance.request({\n      method: \"POST\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}/messages`,\n      jwt: this.generateAccessToken({\n        su: true,\n        userId: options.userId\n      }).token,\n      body: {\n        parts\n      }\n    })).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  editMessage(roomId, messageId, options) {\n    let messagePayload = {\n      text: options.text\n    };\n\n    if (options.attachment) {\n      messagePayload.attachment = {\n        resource_link: options.attachment.resourceLink,\n        type: options.attachment.type\n      };\n    }\n\n    return this.serverInstanceV2.request({\n      method: \"PUT\",\n      path: `/rooms/${encodeURIComponent(roomId)}/messages/${encodeURIComponent(messageId)}`,\n      jwt: this.generateAccessToken({\n        su: true,\n        userId: options.userId\n      }).token,\n      body: messagePayload\n    }).then(() => {});\n  }\n\n  editSimpleMessage(roomId, messageId, options) {\n    return this.editMultipartMessage(roomId, messageId, {\n      userId: options.userId,\n      parts: [{\n        type: \"text/plain\",\n        content: options.text\n      }]\n    });\n  }\n\n  editMultipartMessage(roomId, messageId, options) {\n    if (options.parts.length === 0) {\n      return Promise.reject(new TypeError(\"message must contain at least one part\"));\n    }\n\n    return Promise.all(options.parts.map(part => part.file ? this.uploadAttachment({\n      userId: options.userId,\n      roomId: roomId,\n      part\n    }) : part)).then(parts => this.serverInstance.request({\n      method: \"PUT\",\n      path: `/rooms/${encodeURIComponent(roomId)}/messages/${encodeURIComponent(messageId)}`,\n      jwt: this.generateAccessToken({\n        su: true,\n        userId: options.userId\n      }).token,\n      body: {\n        parts\n      }\n    })).then(() => {});\n  }\n\n  uploadAttachment({\n    userId,\n    roomId,\n    part: {\n      type,\n      name,\n      customData,\n      file\n    }\n  }) {\n    return this.serverInstance.request({\n      method: \"POST\",\n      path: `/rooms/${encodeURIComponent(roomId)}/attachments`,\n      jwt: this.generateAccessToken({\n        su: true,\n        userId\n      }).token,\n      body: {\n        content_type: type,\n        content_length: file.length,\n        name,\n        custom_data: customData\n      }\n    }).then(({\n      body\n    }) => {\n      const _JSON$parse = JSON.parse(body),\n            attachmentId = _JSON$parse.attachment_id,\n            uploadURL = _JSON$parse.upload_url;\n\n      return got_1.put(uploadURL, {\n        body: file,\n        headers: {\n          \"content-type\": type\n        }\n      }).then(() => ({\n        type,\n        attachment: {\n          id: attachmentId\n        }\n      }));\n    });\n  }\n\n  deleteMessage(options) {\n    return this.serverInstance.request({\n      method: \"DELETE\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}/messages/${encodeURIComponent(options.messageId)}`,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  fetchMultipartMessage(options) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}/messages/${encodeURIComponent(options.messageId)}`,\n      jwt: this.getServerToken()\n    }).then(res => JSON.parse(res.body));\n  }\n\n  getRoomMessages(options) {\n    return this.fetchMessages(Object.assign({}, options, {\n      serverInstance: this.serverInstanceV2\n    }));\n  }\n\n  fetchMultipartMessages(options) {\n    return this.fetchMessages(Object.assign({}, options, {\n      serverInstance: this.serverInstance\n    }));\n  }\n\n  fetchMessages(options) {\n    const jwt = this.generateAccessToken({\n      su: true\n    });\n    let qs = {\n      direction: options.direction,\n      limit: options.limit,\n      initial_id: options.initialId\n    };\n    return options.serverInstance.request({\n      method: \"GET\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}/messages`,\n      jwt: jwt.token,\n      qs: qs\n    }).then(res => JSON.parse(res.body));\n  }\n\n  getRooms(options = {}) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: `/rooms`,\n      jwt: this.getServerToken(),\n      qs: {\n        from_id: options.fromId,\n        include_private: options.includePrivate\n      }\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  getUserRooms(options) {\n    const jwt = this.generateAccessToken({\n      su: true,\n      userId: options.userId\n    });\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: `/users/${options.userId}/rooms`,\n      jwt: jwt.token\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  getUserJoinableRooms(options) {\n    const jwt = this.generateAccessToken({\n      su: true,\n      userId: options.userId\n    });\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: `/users/${options.userId}/rooms`,\n      qs: {\n        joinable: true\n      },\n      jwt: jwt.token\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  createRoom(options) {\n    const jwt = this.generateAccessToken({\n      su: true,\n      userId: options.creatorId\n    });\n    const id = options.id,\n          name = options.name,\n          pushNotificationTitleOverride = options.pushNotificationTitleOverride,\n          isPrivate = options.isPrivate,\n          userIds = options.userIds,\n          customData = options.customData;\n    let roomPayload = {\n      name,\n      push_notification_title_override: pushNotificationTitleOverride,\n      private: isPrivate || false\n    };\n\n    if (id) {\n      roomPayload.id = id;\n    }\n\n    if (userIds && userIds.length !== 0) {\n      roomPayload[\"user_ids\"] = userIds;\n    }\n\n    if (customData) {\n      roomPayload.custom_data = customData;\n    }\n\n    return this.serverInstance.request({\n      method: \"POST\",\n      path: \"/rooms\",\n      jwt: jwt.token,\n      body: roomPayload\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  updateRoom(options) {\n    const body = {};\n\n    if (options.name) {\n      body.name = options.name;\n    }\n\n    if (options.pushNotificationTitleOverride) {\n      body.push_notification_title_override = options.pushNotificationTitleOverride;\n    }\n\n    if (options.isPrivate != null) {\n      body.private = options.isPrivate;\n    }\n\n    if (options.customData) {\n      body.custom_data = options.customData;\n    }\n\n    return this.serverInstance.request({\n      method: \"PUT\",\n      path: `/rooms/${options.id}`,\n      jwt: this.getServerToken(),\n      body\n    }).then(() => {});\n  }\n\n  deleteRoom(options) {\n    return this.serverInstance.request({\n      method: \"DELETE\",\n      path: `/rooms/${options.id}`,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  addUsersToRoom(options) {\n    return this.serverInstance.request({\n      method: \"PUT\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}/users/add`,\n      jwt: this.getServerToken(),\n      body: {\n        user_ids: options.userIds\n      }\n    }).then(() => {});\n  }\n\n  removeUsersFromRoom(options) {\n    return this.serverInstance.request({\n      method: \"PUT\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}/users/remove`,\n      jwt: this.getServerToken(),\n      body: {\n        user_ids: options.userIds\n      }\n    }).then(() => {});\n  } // Authorizer interactions\n\n\n  createRoomRole(options) {\n    return this.createRole(Object.assign({}, options, {\n      scope: \"room\"\n    }));\n  }\n\n  createGlobalRole(options) {\n    return this.createRole(Object.assign({}, options, {\n      scope: \"global\"\n    }));\n  }\n\n  createRole(options) {\n    return this.authorizerInstance.request({\n      method: \"POST\",\n      path: `/roles`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: options,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  deleteGlobalRole(options) {\n    return this.authorizerInstance.request({\n      method: \"DELETE\",\n      path: `/roles/${options.name}/scope/global`,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  deleteRoomRole(options) {\n    return this.authorizerInstance.request({\n      method: \"DELETE\",\n      path: `/roles/${options.name}/scope/room`,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  assignGlobalRoleToUser(options) {\n    return this.assignRoleToUser(options);\n  }\n\n  assignRoomRoleToUser(options) {\n    return this.assignRoleToUser(options);\n  }\n\n  assignRoleToUser(options) {\n    return this.authorizerInstance.request({\n      method: \"PUT\",\n      path: `/users/${options.userId}/roles`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        name: options.name,\n        room_id: options.roomId\n      },\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getUserRoles(options) {\n    return this.authorizerInstance.request({\n      method: \"GET\",\n      path: `/users/${options.userId}/roles`,\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  removeGlobalRoleForUser(options) {\n    return this.authorizerInstance.request({\n      method: \"DELETE\",\n      path: `/users/${options.userId}/roles`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  removeRoomRoleForUser(options) {\n    return this.authorizerInstance.request({\n      method: \"DELETE\",\n      path: `/users/${options.userId}/roles`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      qs: {\n        room_id: options.roomId\n      },\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getPermissionsForGlobalRole(options) {\n    return this.authorizerInstance.request({\n      method: \"GET\",\n      path: `/roles/${options.name}/scope/global/permissions`,\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  getPermissionsForRoomRole(options) {\n    return this.authorizerInstance.request({\n      method: \"GET\",\n      path: `/roles/${options.name}/scope/room/permissions`,\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  updatePermissionsForGlobalRole(options) {\n    return this.updatePermissionsForRole(options.name, \"global\", options.permissionsToAdd || [], options.permissionsToRemove || []);\n  }\n\n  updatePermissionsForRoomRole(options) {\n    return this.updatePermissionsForRole(options.name, \"room\", options.permissionsToAdd || [], options.permissionsToRemove || []);\n  }\n\n  getRoles() {\n    return this.authorizerInstance.request({\n      method: \"GET\",\n      path: `/roles`,\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  } // Cursors\n\n\n  setReadCursor(options) {\n    return this.cursorsInstance.request({\n      method: \"PUT\",\n      path: `/cursors/0/rooms/${encodeURIComponent(options.roomId)}/users/${encodeURIComponent(options.userId)}`,\n      body: {\n        position: options.position\n      },\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getReadCursor(options) {\n    return this.cursorsInstance.request({\n      method: \"GET\",\n      path: `/cursors/0/rooms/${encodeURIComponent(options.roomId)}/users/${encodeURIComponent(options.userId)}`,\n      jwt: this.getServerToken()\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  getReadCursorsForUser(options) {\n    return this.cursorsInstance.request({\n      method: \"GET\",\n      path: `/cursors/0/users/${encodeURIComponent(options.userId)}`,\n      jwt: this.getServerToken()\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  getReadCursorsForRoom(options) {\n    return this.cursorsInstance.request({\n      method: \"GET\",\n      path: `/cursors/0/rooms/${encodeURIComponent(options.roomId)}`,\n      jwt: this.getServerToken()\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  asyncDeleteRoom(options) {\n    return this.schedulerInstance.request({\n      method: \"PUT\",\n      path: `/rooms/${encodeURIComponent(options.roomId)}`,\n      jwt: this.getServerToken()\n    }).then(res => JSON.parse(res.body));\n  }\n\n  asyncDeleteUser(options) {\n    return this.schedulerInstance.request({\n      method: \"PUT\",\n      path: `/users/${encodeURIComponent(options.userId)}`,\n      jwt: this.getServerToken()\n    }).then(res => JSON.parse(res.body));\n  }\n\n  getDeleteStatus(options) {\n    return this.schedulerInstance.request({\n      method: \"GET\",\n      path: `/status/${encodeURIComponent(options.jobId)}`,\n      jwt: this.getServerToken()\n    }).then(res => JSON.parse(res.body));\n  } // General requests\n\n\n  apiRequest(options) {\n    options.jwt = options.jwt || this.getServerToken();\n    return this.serverInstance.request(options);\n  }\n\n  authorizerRequest(options) {\n    options.jwt = options.jwt || this.getServerToken();\n    return this.authorizerInstance.request(options);\n  }\n\n  cursorsRequest(options) {\n    options.jwt = options.jwt || this.getServerToken();\n    return this.cursorsInstance.request(options);\n  }\n\n  updatePermissionsForRole(name, scope, permissionsToadd = [], permissionsToRemove = []) {\n    if (permissionsToadd.length === 0 && permissionsToRemove.length === 0) {\n      throw new Error(`Either permissionsToAdd or permissionsToRemove is required`);\n    }\n\n    let body = {};\n\n    if (permissionsToadd.length > 0) {\n      body[\"add_permissions\"] = permissionsToadd;\n    }\n\n    if (permissionsToRemove.length > 0) {\n      body[\"remove_permissions\"] = permissionsToRemove;\n    }\n\n    return this.authorizerInstance.request({\n      method: \"PUT\",\n      path: `/roles/${name}/scope/${scope}/permissions`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n  /**\n   * This method manages the token for http library and pusher platform\n   * communication\n   */\n\n\n  getServerToken() {\n    if (this.tokenWithExpiry && this.tokenWithExpiry.expiresAt > utils_1.getCurrentTimeInSeconds()) {\n      return this.tokenWithExpiry.token;\n    } // Otherwise generate new token and its expiration time\n\n\n    const tokenWithExpiresIn = this.serverInstance.generateAccessToken({\n      su: true\n    });\n    this.tokenWithExpiry = {\n      token: tokenWithExpiresIn.token,\n      expiresAt: utils_1.getCurrentTimeInSeconds() + tokenWithExpiresIn.expires_in - TOKEN_EXPIRY_LEEWAY\n    };\n    return this.tokenWithExpiry.token;\n  }\n\n}\n\nexports.default = Chatkit;","map":{"version":3,"sources":["../../src/chatkit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst got_1 = require(\"got\");\nconst platform_node_1 = require(\"@pusher/platform-node\");\nconst utils_1 = require(\"./utils\");\nconst package_json_1 = __importDefault(require(\"../package.json\"));\nconst TOKEN_EXPIRY_LEEWAY = 30;\nclass Chatkit {\n    constructor(options) {\n        const { instanceLocator, key, port, host, client } = options;\n        const sdkInfo = new platform_node_1.SDKInfo({\n            productName: \"chatkit\",\n            version: package_json_1.default.version,\n        });\n        const instanceOptions = {\n            locator: instanceLocator,\n            key,\n            port,\n            host,\n            client,\n            sdkInfo,\n        };\n        const serverInstanceOptions = (version) => (Object.assign({}, instanceOptions, { serviceName: \"chatkit\", serviceVersion: version }));\n        const authorizerInstanceOptions = Object.assign({}, instanceOptions, { serviceName: \"chatkit_authorizer\", serviceVersion: \"v2\" });\n        const cursorsInstanceOptions = Object.assign({}, instanceOptions, { serviceName: \"chatkit_cursors\", serviceVersion: \"v2\" });\n        const schedulerInstanceOptions = Object.assign({}, instanceOptions, { serviceName: \"chatkit_scheduler\", serviceVersion: \"v1\" });\n        this.instanceLocator = instanceLocator;\n        this.serverInstanceV2 = new platform_node_1.Instance(serverInstanceOptions(\"v2\"));\n        this.serverInstance = new platform_node_1.Instance(serverInstanceOptions(\"v6\"));\n        this.authorizerInstance = new platform_node_1.Instance(authorizerInstanceOptions);\n        this.cursorsInstance = new platform_node_1.Instance(cursorsInstanceOptions);\n        this.schedulerInstance = new platform_node_1.Instance(schedulerInstanceOptions);\n    }\n    // Token generation\n    authenticate(options) {\n        const { userId, authPayload } = options;\n        return this.serverInstance.authenticate(authPayload || { grant_type: \"client_credentials\" }, { userId });\n    }\n    // Used internally - not designed to be used externally\n    generateAccessToken(options) {\n        return this.serverInstance.generateAccessToken(options);\n    }\n    // User interactions\n    createUser(options) {\n        const { id, name } = options;\n        return this.serverInstance\n            .request({\n            method: \"POST\",\n            path: `/users`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: {\n                id,\n                name,\n                avatar_url: options.avatarURL,\n                custom_data: options.customData,\n            },\n            jwt: this.getServerToken(),\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    createUsers(options) {\n        const users = options.users.map(user => {\n            const { id, name } = user;\n            return {\n                id,\n                name,\n                avatar_url: user.avatarURL,\n                custom_data: user.customData,\n            };\n        });\n        return this.serverInstance\n            .request({\n            method: \"POST\",\n            path: `/batch_users`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: {\n                users,\n            },\n            jwt: this.getServerToken(),\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    updateUser(options) {\n        const jwt = this.generateAccessToken({\n            su: true,\n            userId: options.id,\n        });\n        let updatePayload = {};\n        if (options.name) {\n            updatePayload.name = options.name;\n        }\n        if (options.avatarURL) {\n            updatePayload.avatar_url = options.avatarURL;\n        }\n        if (options.customData) {\n            updatePayload.custom_data = options.customData;\n        }\n        return this.serverInstance\n            .request({\n            method: \"PUT\",\n            path: `/users/${options.id}`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: updatePayload,\n            jwt: jwt.token,\n        })\n            .then(() => { });\n    }\n    deleteUser(options) {\n        return this.serverInstance\n            .request({\n            method: \"DELETE\",\n            path: `/users/${options.userId}`,\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    getUser(options) {\n        return this.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/users/${encodeURIComponent(options.id)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(({ body }) => JSON.parse(body));\n    }\n    getUsers(options = {}) {\n        return this.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/users`,\n            qs: {\n                from_ts: options.fromTimestamp,\n                limit: options.limit,\n            },\n            jwt: this.getServerToken(),\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    getUsersById(options) {\n        return this.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/users_by_ids`,\n            qs: {\n                id: options.userIds,\n            },\n            useQuerystring: true,\n            jwt: this.getServerToken(),\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    // Room interactions\n    getRoom(options) {\n        const jwt = this.generateAccessToken({\n            su: true,\n        });\n        return this.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}`,\n            jwt: jwt.token,\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    sendMessage(options) {\n        let messagePayload = { text: options.text };\n        if (options.attachment) {\n            messagePayload.attachment = {\n                resource_link: options.attachment.resourceLink,\n                type: options.attachment.type,\n            };\n        }\n        return this.serverInstanceV2\n            .request({\n            method: \"POST\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}/messages`,\n            jwt: this.generateAccessToken({\n                su: true,\n                userId: options.userId,\n            }).token,\n            body: messagePayload,\n        })\n            .then(({ body }) => JSON.parse(body));\n    }\n    sendSimpleMessage(options) {\n        return this.sendMultipartMessage({\n            roomId: options.roomId,\n            userId: options.userId,\n            parts: [{ type: \"text/plain\", content: options.text }],\n        });\n    }\n    sendMultipartMessage(options) {\n        if (options.parts.length === 0) {\n            return Promise.reject(new TypeError(\"message must contain at least one part\"));\n        }\n        return Promise.all(options.parts.map((part) => part.file\n            ? this.uploadAttachment({\n                userId: options.userId,\n                roomId: options.roomId,\n                part,\n            })\n            : part))\n            .then(parts => this.serverInstance.request({\n            method: \"POST\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}/messages`,\n            jwt: this.generateAccessToken({\n                su: true,\n                userId: options.userId,\n            }).token,\n            body: { parts },\n        }))\n            .then(({ body }) => JSON.parse(body));\n    }\n    editMessage(roomId, messageId, options) {\n        let messagePayload = { text: options.text };\n        if (options.attachment) {\n            messagePayload.attachment = {\n                resource_link: options.attachment.resourceLink,\n                type: options.attachment.type,\n            };\n        }\n        return this.serverInstanceV2\n            .request({\n            method: \"PUT\",\n            path: `/rooms/${encodeURIComponent(roomId)}/messages/${encodeURIComponent(messageId)}`,\n            jwt: this.generateAccessToken({\n                su: true,\n                userId: options.userId,\n            }).token,\n            body: messagePayload,\n        })\n            .then(() => { });\n    }\n    editSimpleMessage(roomId, messageId, options) {\n        return this.editMultipartMessage(roomId, messageId, {\n            userId: options.userId,\n            parts: [{ type: \"text/plain\", content: options.text }],\n        });\n    }\n    editMultipartMessage(roomId, messageId, options) {\n        if (options.parts.length === 0) {\n            return Promise.reject(new TypeError(\"message must contain at least one part\"));\n        }\n        return Promise.all(options.parts.map((part) => part.file\n            ? this.uploadAttachment({\n                userId: options.userId,\n                roomId: roomId,\n                part,\n            })\n            : part))\n            .then(parts => this.serverInstance.request({\n            method: \"PUT\",\n            path: `/rooms/${encodeURIComponent(roomId)}/messages/${encodeURIComponent(messageId)}`,\n            jwt: this.generateAccessToken({\n                su: true,\n                userId: options.userId,\n            }).token,\n            body: { parts },\n        }))\n            .then(() => { });\n    }\n    uploadAttachment({ userId, roomId, part: { type, name, customData, file }, }) {\n        return this.serverInstance\n            .request({\n            method: \"POST\",\n            path: `/rooms/${encodeURIComponent(roomId)}/attachments`,\n            jwt: this.generateAccessToken({\n                su: true,\n                userId,\n            }).token,\n            body: {\n                content_type: type,\n                content_length: file.length,\n                name,\n                custom_data: customData,\n            },\n        })\n            .then(({ body }) => {\n            const { attachment_id: attachmentId, upload_url: uploadURL, } = JSON.parse(body);\n            return got_1.put(uploadURL, {\n                body: file,\n                headers: {\n                    \"content-type\": type,\n                },\n            }).then(() => ({ type, attachment: { id: attachmentId } }));\n        });\n    }\n    deleteMessage(options) {\n        return this.serverInstance\n            .request({\n            method: \"DELETE\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}/messages/${encodeURIComponent(options.messageId)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    fetchMultipartMessage(options) {\n        return this.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}/messages/${encodeURIComponent(options.messageId)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(res => JSON.parse(res.body));\n    }\n    getRoomMessages(options) {\n        return this.fetchMessages(Object.assign({}, options, { serverInstance: this.serverInstanceV2 }));\n    }\n    fetchMultipartMessages(options) {\n        return this.fetchMessages(Object.assign({}, options, { serverInstance: this.serverInstance }));\n    }\n    fetchMessages(options) {\n        const jwt = this.generateAccessToken({\n            su: true,\n        });\n        let qs = {\n            direction: options.direction,\n            limit: options.limit,\n            initial_id: options.initialId,\n        };\n        return options.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}/messages`,\n            jwt: jwt.token,\n            qs: qs,\n        })\n            .then(res => JSON.parse(res.body));\n    }\n    getRooms(options = {}) {\n        return this.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/rooms`,\n            jwt: this.getServerToken(),\n            qs: {\n                from_id: options.fromId,\n                include_private: options.includePrivate,\n            },\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    getUserRooms(options) {\n        const jwt = this.generateAccessToken({\n            su: true,\n            userId: options.userId,\n        });\n        return this.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/users/${options.userId}/rooms`,\n            jwt: jwt.token,\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    getUserJoinableRooms(options) {\n        const jwt = this.generateAccessToken({\n            su: true,\n            userId: options.userId,\n        });\n        return this.serverInstance\n            .request({\n            method: \"GET\",\n            path: `/users/${options.userId}/rooms`,\n            qs: { joinable: true },\n            jwt: jwt.token,\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    createRoom(options) {\n        const jwt = this.generateAccessToken({\n            su: true,\n            userId: options.creatorId,\n        });\n        const { id, name, pushNotificationTitleOverride, isPrivate, userIds, customData } = options;\n        let roomPayload = {\n            name,\n            push_notification_title_override: pushNotificationTitleOverride,\n            private: isPrivate || false,\n        };\n        if (id) {\n            roomPayload.id = id;\n        }\n        if (userIds && userIds.length !== 0) {\n            roomPayload[\"user_ids\"] = userIds;\n        }\n        if (customData) {\n            roomPayload.custom_data = customData;\n        }\n        return this.serverInstance\n            .request({\n            method: \"POST\",\n            path: \"/rooms\",\n            jwt: jwt.token,\n            body: roomPayload,\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    updateRoom(options) {\n        const body = {};\n        if (options.name) {\n            body.name = options.name;\n        }\n        if (options.pushNotificationTitleOverride) {\n            body.push_notification_title_override = options.pushNotificationTitleOverride;\n        }\n        if (options.isPrivate != null) {\n            body.private = options.isPrivate;\n        }\n        if (options.customData) {\n            body.custom_data = options.customData;\n        }\n        return this.serverInstance\n            .request({\n            method: \"PUT\",\n            path: `/rooms/${options.id}`,\n            jwt: this.getServerToken(),\n            body,\n        })\n            .then(() => { });\n    }\n    deleteRoom(options) {\n        return this.serverInstance\n            .request({\n            method: \"DELETE\",\n            path: `/rooms/${options.id}`,\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    addUsersToRoom(options) {\n        return this.serverInstance\n            .request({\n            method: \"PUT\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}/users/add`,\n            jwt: this.getServerToken(),\n            body: { user_ids: options.userIds },\n        })\n            .then(() => { });\n    }\n    removeUsersFromRoom(options) {\n        return this.serverInstance\n            .request({\n            method: \"PUT\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}/users/remove`,\n            jwt: this.getServerToken(),\n            body: { user_ids: options.userIds },\n        })\n            .then(() => { });\n    }\n    // Authorizer interactions\n    createRoomRole(options) {\n        return this.createRole(Object.assign({}, options, { scope: \"room\" }));\n    }\n    createGlobalRole(options) {\n        return this.createRole(Object.assign({}, options, { scope: \"global\" }));\n    }\n    createRole(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"POST\",\n            path: `/roles`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: options,\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    deleteGlobalRole(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"DELETE\",\n            path: `/roles/${options.name}/scope/global`,\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    deleteRoomRole(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"DELETE\",\n            path: `/roles/${options.name}/scope/room`,\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    assignGlobalRoleToUser(options) {\n        return this.assignRoleToUser(options);\n    }\n    assignRoomRoleToUser(options) {\n        return this.assignRoleToUser(options);\n    }\n    assignRoleToUser(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"PUT\",\n            path: `/users/${options.userId}/roles`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: { name: options.name, room_id: options.roomId },\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    getUserRoles(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"GET\",\n            path: `/users/${options.userId}/roles`,\n            jwt: this.getServerToken(),\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    removeGlobalRoleForUser(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"DELETE\",\n            path: `/users/${options.userId}/roles`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    removeRoomRoleForUser(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"DELETE\",\n            path: `/users/${options.userId}/roles`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            qs: { room_id: options.roomId },\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    getPermissionsForGlobalRole(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"GET\",\n            path: `/roles/${options.name}/scope/global/permissions`,\n            jwt: this.getServerToken(),\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    getPermissionsForRoomRole(options) {\n        return this.authorizerInstance\n            .request({\n            method: \"GET\",\n            path: `/roles/${options.name}/scope/room/permissions`,\n            jwt: this.getServerToken(),\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    updatePermissionsForGlobalRole(options) {\n        return this.updatePermissionsForRole(options.name, \"global\", options.permissionsToAdd || [], options.permissionsToRemove || []);\n    }\n    updatePermissionsForRoomRole(options) {\n        return this.updatePermissionsForRole(options.name, \"room\", options.permissionsToAdd || [], options.permissionsToRemove || []);\n    }\n    getRoles() {\n        return this.authorizerInstance\n            .request({\n            method: \"GET\",\n            path: `/roles`,\n            jwt: this.getServerToken(),\n        })\n            .then(res => {\n            return JSON.parse(res.body);\n        });\n    }\n    // Cursors\n    setReadCursor(options) {\n        return this.cursorsInstance\n            .request({\n            method: \"PUT\",\n            path: `/cursors/0/rooms/${encodeURIComponent(options.roomId)}/users/${encodeURIComponent(options.userId)}`,\n            body: { position: options.position },\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    getReadCursor(options) {\n        return this.cursorsInstance\n            .request({\n            method: \"GET\",\n            path: `/cursors/0/rooms/${encodeURIComponent(options.roomId)}/users/${encodeURIComponent(options.userId)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(({ body }) => JSON.parse(body));\n    }\n    getReadCursorsForUser(options) {\n        return this.cursorsInstance\n            .request({\n            method: \"GET\",\n            path: `/cursors/0/users/${encodeURIComponent(options.userId)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(({ body }) => JSON.parse(body));\n    }\n    getReadCursorsForRoom(options) {\n        return this.cursorsInstance\n            .request({\n            method: \"GET\",\n            path: `/cursors/0/rooms/${encodeURIComponent(options.roomId)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(({ body }) => JSON.parse(body));\n    }\n    asyncDeleteRoom(options) {\n        return this.schedulerInstance\n            .request({\n            method: \"PUT\",\n            path: `/rooms/${encodeURIComponent(options.roomId)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(res => JSON.parse(res.body));\n    }\n    asyncDeleteUser(options) {\n        return this.schedulerInstance\n            .request({\n            method: \"PUT\",\n            path: `/users/${encodeURIComponent(options.userId)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(res => JSON.parse(res.body));\n    }\n    getDeleteStatus(options) {\n        return this.schedulerInstance\n            .request({\n            method: \"GET\",\n            path: `/status/${encodeURIComponent(options.jobId)}`,\n            jwt: this.getServerToken(),\n        })\n            .then(res => JSON.parse(res.body));\n    }\n    // General requests\n    apiRequest(options) {\n        options.jwt = options.jwt || this.getServerToken();\n        return this.serverInstance.request(options);\n    }\n    authorizerRequest(options) {\n        options.jwt = options.jwt || this.getServerToken();\n        return this.authorizerInstance.request(options);\n    }\n    cursorsRequest(options) {\n        options.jwt = options.jwt || this.getServerToken();\n        return this.cursorsInstance.request(options);\n    }\n    updatePermissionsForRole(name, scope, permissionsToadd = [], permissionsToRemove = []) {\n        if (permissionsToadd.length === 0 && permissionsToRemove.length === 0) {\n            throw new Error(`Either permissionsToAdd or permissionsToRemove is required`);\n        }\n        let body = {};\n        if (permissionsToadd.length > 0) {\n            body[\"add_permissions\"] = permissionsToadd;\n        }\n        if (permissionsToRemove.length > 0) {\n            body[\"remove_permissions\"] = permissionsToRemove;\n        }\n        return this.authorizerInstance\n            .request({\n            method: \"PUT\",\n            path: `/roles/${name}/scope/${scope}/permissions`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: body,\n            jwt: this.getServerToken(),\n        })\n            .then(() => { });\n    }\n    /**\n     * This method manages the token for http library and pusher platform\n     * communication\n     */\n    getServerToken() {\n        if (this.tokenWithExpiry &&\n            this.tokenWithExpiry.expiresAt > utils_1.getCurrentTimeInSeconds()) {\n            return this.tokenWithExpiry.token;\n        }\n        // Otherwise generate new token and its expiration time\n        const tokenWithExpiresIn = this.serverInstance.generateAccessToken({\n            su: true,\n        });\n        this.tokenWithExpiry = {\n            token: tokenWithExpiresIn.token,\n            expiresAt: utils_1.getCurrentTimeInSeconds() +\n                tokenWithExpiresIn.expires_in -\n                TOKEN_EXPIRY_LEEWAY,\n        };\n        return this.tokenWithExpiry.token;\n    }\n}\nexports.default = Chatkit;\n//# sourceMappingURL=chatkit.js.map"]},"metadata":{},"sourceType":"script"}