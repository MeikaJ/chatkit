{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar authenticator_1 = require(\"./authenticator\");\n\nvar base_client_1 = require(\"./base_client\");\n\nvar HOST_BASE = 'pusherplatform.io';\nvar HTTPS_PORT = 443;\n\nvar Instance =\n/** @class */\nfunction () {\n  function Instance(options) {\n    if (!options.locator) {\n      throw new Error('Expected `instanceLocator` property in Instance options');\n    }\n\n    if (options.locator.split(\":\").length !== 3) {\n      throw new Error('The `locator` property is in the wrong format');\n    }\n\n    if (!options.serviceName) {\n      throw new Error('Expected `serviceName` property in Instance options');\n    }\n\n    if (!options.serviceVersion) {\n      throw new Error('Expected `serviceVersion` property in Instance otpions');\n    }\n\n    if (!options.client && !options.sdkInfo) {\n      throw new Error('Expected one of `client` or `sdkInfo` to be provided');\n    }\n\n    var splitInstance = options.locator.split(\":\");\n    this.platformVersion = splitInstance[0];\n    this.cluster = splitInstance[1];\n    this.id = splitInstance[2];\n    this.serviceName = options.serviceName;\n    this.serviceVersion = options.serviceVersion;\n    var keyParts = options.key.match(/^([^:]+):(.+)$/);\n\n    if (!keyParts) {\n      throw new Error('Invalid instance key');\n    }\n\n    this.keyId = keyParts[1];\n    this.keySecret = keyParts[2];\n    this.client = options.client || new base_client_1.default({\n      host: options.host || this.cluster + \".\" + HOST_BASE,\n      instanceId: this.id,\n      serviceName: this.serviceName,\n      serviceVersion: this.serviceVersion,\n      port: options.port || HTTPS_PORT,\n      sdkInfo: options.sdkInfo\n    });\n    this.authenticator = new authenticator_1.default(this.id, this.keyId, this.keySecret);\n  }\n\n  Instance.prototype.request = function (options) {\n    return this.client.request(options);\n  };\n\n  Instance.prototype.authenticate = function (authenticatePayload, options) {\n    return this.authenticator.authenticate(authenticatePayload, options);\n  };\n\n  Instance.prototype.authenticateWithRefreshToken = function (authenticatePayload, options) {\n    return this.authenticator.authenticateWithRefreshToken(authenticatePayload, options);\n  };\n\n  Instance.prototype.generateAccessToken = function (options) {\n    return this.authenticator.generateAccessToken(options);\n  };\n\n  return Instance;\n}();\n\nexports.default = Instance;","map":{"version":3,"sources":["../src/instance.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar authenticator_1 = require(\"./authenticator\");\nvar base_client_1 = require(\"./base_client\");\nvar HOST_BASE = 'pusherplatform.io';\nvar HTTPS_PORT = 443;\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        if (!options.locator) {\n            throw new Error('Expected `instanceLocator` property in Instance options');\n        }\n        if (options.locator.split(\":\").length !== 3) {\n            throw new Error('The `locator` property is in the wrong format');\n        }\n        if (!options.serviceName) {\n            throw new Error('Expected `serviceName` property in Instance options');\n        }\n        if (!options.serviceVersion) {\n            throw new Error('Expected `serviceVersion` property in Instance otpions');\n        }\n        if (!options.client && !options.sdkInfo) {\n            throw new Error('Expected one of `client` or `sdkInfo` to be provided');\n        }\n        var splitInstance = options.locator.split(\":\");\n        this.platformVersion = splitInstance[0];\n        this.cluster = splitInstance[1];\n        this.id = splitInstance[2];\n        this.serviceName = options.serviceName;\n        this.serviceVersion = options.serviceVersion;\n        var keyParts = options.key.match(/^([^:]+):(.+)$/);\n        if (!keyParts) {\n            throw new Error('Invalid instance key');\n        }\n        this.keyId = keyParts[1];\n        this.keySecret = keyParts[2];\n        this.client = options.client || new base_client_1.default({\n            host: options.host || this.cluster + \".\" + HOST_BASE,\n            instanceId: this.id,\n            serviceName: this.serviceName,\n            serviceVersion: this.serviceVersion,\n            port: options.port || HTTPS_PORT,\n            sdkInfo: options.sdkInfo,\n        });\n        this.authenticator = new authenticator_1.default(this.id, this.keyId, this.keySecret);\n    }\n    Instance.prototype.request = function (options) {\n        return this.client.request(options);\n    };\n    Instance.prototype.authenticate = function (authenticatePayload, options) {\n        return this.authenticator.authenticate(authenticatePayload, options);\n    };\n    Instance.prototype.authenticateWithRefreshToken = function (authenticatePayload, options) {\n        return this.authenticator.authenticateWithRefreshToken(authenticatePayload, options);\n    };\n    Instance.prototype.generateAccessToken = function (options) {\n        return this.authenticator.generateAccessToken(options);\n    };\n    return Instance;\n}());\nexports.default = Instance;\n//# sourceMappingURL=instance.js.map"]},"metadata":{},"sourceType":"script"}